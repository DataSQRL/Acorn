[
  {
    "type": "api",
    "function": {
      "name": "spending_by_category",
      "description": "Returns the customer spending by category by week in decreasing order of time, i.e. showing the most recent week first, then the week before that and so forth.",
      "parameters": {
        "type": "object",
        "properties": {
          "customerid": {
            "type": "integer"
          },
          "limit": {
            "type": "integer",
            "description": "The number of spending records to return. Each week has 12 records - one for each spending category. To return the spending records for multiple weeks, multiple the number of weeks by 12. For example, to return spending records for 5 week, set the limit to 60."
          }
        },
        "required": ["customerid"]
      }
    },
    "context": ["customerid"],
    "api": {
      "query": "query SpendingByCategory($customerid: Int!, $limit:Int = 12) {\n  SpendingByCategory(customerid: $customerid, limit: $limit) {\n    timeWeek\n    category\n    spending\n  }\n}"
    }
  },
  {
    "type": "api",
    "function": {
      "name": "spending_by_day",
      "description": "Returns the total customer spending by day for the specified time period ordered by time (most recent first). When a particular day does not have any spending, no record is returned for that day.",
      "parameters": {
        "type": "object",
        "properties": {
          "customerid": {
            "type": "integer"
          },
          "fromTime": {
            "type": "string",
            "description": "RFC-3339 compliant date time scalar. Returns spending from this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`."
          },
          "toTime": {
            "type": "string",
            "description": "RFC-3339 compliant date time scalar. Returns spending up to this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`."
          }
        },
        "required": ["customerid","fromTime","toTime"]
      }
    },
    "context": ["customerid"],
    "api": {
      "query": "query SpendingByDay($customerid:Int!, $fromTime: DateTime!, $toTime: DateTime!) {\n  SpendingByDay(customerid:$customerid, fromTime: $fromTime, toTime: $toTime) {\n    timeDay\n    spending\n  }\n}"
    }
  },
  {
    "type": "api",
    "function": {
      "name": "transactions",
      "description": "Returns all credit card transactions within a specified time period ordered by time (most recent first).",
      "parameters": {
        "type": "object",
        "properties": {
          "customerid": {
            "type": "integer"
          },
          "fromTime": {
            "type": "string",
            "description": "RFC-3339 compliant date time scalar. Returns transactions after this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`."
          },
          "toTime": {
            "type": "string",
            "description": "RFC-3339 compliant date time scalar. Returns transactions up to this time. Use the start of the day only, e.g. `2024-01-19T00:00:00-00:00`."
          }
        },
        "required": ["customerid","fromTime","toTime"]
      }
    },
    "context": ["customerid"],
    "api": {
      "query": "query GetTransactions($customerid:Int!, $fromTime: DateTime!, $toTime: DateTime!) {\n  Transactions(customerid:$customerid, fromTime: $fromTime, toTime: $toTime) {\n    time\n    cardNo\n    amount\n    merchantName\n    category\n  }\n}"
    }
  },
  {
    "type": "api",
    "function": {
      "name": "InternalSaveChatMessage",
      "description": "Saves User Chat Messages",
      "parameters": {
        "type": "object",
        "properties": {
        },
        "required": []
      }
    },
    "context": ["customerid"],
    "api": {
      "query": "mutation AddChatMsg($role: String!, $content: String!, $name: String, $context: ChatMessageContextInput!) {\n  AddChatMessage(message: {role: $role, content:$content, name: $name, context:$context}) {\n    event_time\n  }\n}"
    }
  },
  {
    "type": "api",
    "function": {
      "name": "InternalGetChatMessages",
      "description": "Retrieves User Chat Messages",
      "parameters": {
        "type": "object",
        "properties": {
        },
        "required": []
      }
    },
    "context": ["customerid"],
    "api": {
      "query": "query GetChatMessages($customerid: Int!, $limit: Int = 10) {\nmessages: CustomerChatMessage(customerid: $customerid, limit:$limit) {\n  role\n  content\n name\n}\n}"
    }
  }
]
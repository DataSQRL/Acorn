[ {
  "type" : "api",
  "function" : {
    "name" : "SpendingByWeek",
    "description" : " Retrieve weekly spending data for a specified customer.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "customerid" : {
          "type" : "integer",
          "description" : "customerid: The unique identifier for the customer."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "query SpendingByWeek($customerid: Int!, $limit: Int = 10, $offset: Int = 0) {\nSpendingByWeek(customerid: $customerid, limit: $limit, offset: $offset) {\nweek\ntotal_spend\ntotal_savings\n}\n\n}"
  }
}, {
  "type" : "api",
  "function" : {
    "name" : "Products",
    "description" : " Retrieve product information with optional filtering by product ID.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        },
        "id" : {
          "type" : "integer",
          "description" : " The unique identifier for the product (optional)."
        }
      },
      "required" : [ ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "query Products($id: Int, $limit: Int = 10, $offset: Int = 0) {\nProducts(id: $id, limit: $limit, offset: $offset) {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\n}\n\n}"
  }
}, {
  "type" : "api",
  "function" : {
    "name" : "Orders",
    "description" : " Retrieve order information for a specified customer.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "customerid" : {
          "type" : "integer",
          "description" : " The unique identifier for the customer."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        },
        "items_limit" : {
          "type" : "integer"
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "query Orders($customerid: Int!, $limit: Int = 10, $offset: Int = 0, $items_limit: Int = 10) {\nOrders(customerid: $customerid, limit: $limit, offset: $offset) {\nid\ncustomerid\ntimestamp\nitems(limit: $items_limit) {\nquantity\nunit_price\ndiscount0\ntotal\nproduct {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\n}\n}\ntotal {\nprice\ndiscount\n}\n}\n\n}"
  }
}, {
  "type" : "api",
  "function" : {
    "name" : "OrdersByTimeRange",
    "description" : "Retrieves orders for a given customer within the specified time range",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "customerid" : {
          "type" : "integer",
          "description" : "The unique identifier for the customer"
        },
        "fromTime" : {
          "type" : "string",
          "description" : "Returns orders where the order timestamp is larger than this RFC-3339 compliant fromTime timestamp"
        },
        "items_limit" : {
          "type" : "integer"
        },
        "toTime" : {
          "type" : "string",
          "description" : "Returns orders where the order timestamp is smaller than this RFC-3339 compliant toTime timestamp"
        }
      },
      "required" : [ "customerid", "fromTime", "toTime" ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "query OrdersByTimeRange($customerid: Int!, $fromTime: DateTime!, $toTime: DateTime!, $items_limit: Int = 10) {\nOrdersByTimeRange(customerid: $customerid, fromTime: $fromTime, toTime: $toTime) {\nid\ncustomerid\ntimestamp\nitems(limit: $items_limit) {\nquantity\nunit_price\ndiscount0\ntotal\nproduct {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\n}\n}\ntotal {\nprice\ndiscount\n}\n}\n\n}"
  }
}, {
  "type" : "api",
  "function" : {
    "name" : "OrderAgain",
    "description" : " Suggest products for a customer to order again based on their previous orders.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "customerid" : {
          "type" : "integer",
          "description" : " The unique identifier for the customer."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "query OrderAgain($customerid: Int!, $limit: Int = 10, $offset: Int = 0) {\nOrderAgain(customerid: $customerid, limit: $limit, offset: $offset) {\nproduct {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\n}\nnum\nquantity\n}\n\n}"
  }
}, {
  "type" : "api",
  "function" : {
    "name" : "InternalGetChatMessages",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer"
        },
        "customerid" : {
          "type" : "integer"
        },
        "limit" : {
          "type" : "integer"
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "query InternalGetChatMessages($customerid: Int!, $limit: Int = 10, $offset: Int = 0) {\nInternalGetChatMessages(customerid: $customerid, limit: $limit, offset: $offset) {\nrole\ncontent\nname\ncustomerid\ntimestamp\nuuid\n}\n\n}"
  }
}, {
  "type" : "api",
  "function" : {
    "name" : "InternalSaveChatMessage",
    "description" : " Saves a chat message",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "role" : {
          "type" : "string",
          "description" : " The role of the message author"
        },
        "name" : {
          "type" : "string",
          "description" : " The name of the function called (if any)"
        },
        "customerid" : {
          "type" : "integer",
          "description" : " The id of the customer for the chat session"
        },
        "content" : {
          "type" : "string",
          "description" : " The content of the message"
        }
      },
      "required" : [ "role", "content", "customerid" ]
    }
  },
  "api" : {
    "name" : "default",
    "query" : "mutation InternalSaveChatMessage($role: String!, $content: String!, $name: String, $customerid: Int!) {\nInternalSaveChatMessage(role: $role, content: $content, name: $name, customerid: $customerid) {\n_source_time\n}\n\n}"
  }
} ]
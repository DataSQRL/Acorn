type Query {
  SpendingByWeek(customerid: Int!, limit: Int = 10, offset: Int = 0): [SpendingByWeek!]
  Products(id: Int, limit: Int = 10, offset: Int = 0): [Products!]
  Orders(customerid: Int!, limit: Int = 10, offset: Int = 0): [Orders!]
  OrderAgain(customerid: Int!, limit: Int = 10, offset: Int = 0): [OrderAgain!]
  CustomerChatMessage(customerid: Int!, , limit: Int = 10, offset: Int = 0): [CustomerChatMessage!]
}

type SpendingByWeek {
  week: String!
  total_spend: Float!
  total_savings: Float!
}

type OrderAgain {
  product: Products!
  num: Int!
  quantity: Int!
}

type Orders {
  id: Int!
  customerid: Int!
  timestamp: String!
  items: [items!]
  total: total!
}

type items {
  quantity: Int!
  unit_price: Float!
  discount0: Float!
  total: Float!
  product: Products
}

type total {
  price: Float!
  discount: Float!
}

type Products {
  id: Int!
  name: String!
  sizing: String!
  weight_in_gram: Float!
  type: String!
  category: String!
  usda_id: Float!
  updated: String!
}

type CustomerChatMessage {
  role: String!
  content: String!
  name: String
  customerid: Int!
  timestamp: String!
  uuid: String!
}

type Mutation {
  AddChatMessage(message: ChatMessageInput!): CreatedChatMessage
}

input ChatMessageInput {
  role: String!
  content: String!
  name: String
  context: ChatMessageContextInput
}

input ChatMessageContextInput {
  customerid: Int
}

type CreatedChatMessage {
  _source_time: String!
}

